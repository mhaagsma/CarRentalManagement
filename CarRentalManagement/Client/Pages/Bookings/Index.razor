@page "/bookings/"
@using Microsoft.VisualBasic.FileIO
@using Microsoft.AspNetCore.Authorization
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<Heading Text="Bookings" />
<br />

<a href="/bookings/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Booking
</a>
<br />
<br />

@if (Bookings == null)
{
    <div class="alert alert-info">Loading Bookings...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Customer Tax Id</th>
                <th>Customer Last Name</th>
                <th>
                    Vehicle Id
                </th>
                <th>
                    Vehicle Make
                </th>
                <th>Date</th>
                <th>Duration</th>
                <th>DateIn</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>

            @foreach (var booking in Bookings)
            {
            <tr>
                <td>@booking.Customer.TaxId</td>
                <td>@booking.Customer.lastname</td>
                <td>@booking.VehicleId</td>
                <td>@booking.Vehicle.Id</td>
                <td>@booking.DateCreated.Date.ToString("dd MMMM yyyy")</td>
                <td>
                    @(booking.DateIn != null ? (booking.DateIn.Value - booking.DateOut).TotalDays.ToString()
                        : "To be Determined")
                </td>
               <td>
                    <a href="/bookings/view/@booking.Id" class="btn btn-primary">
                        <span class="oi oi-book"></span>
                    </a>
                    <a href="/bookings/edit/@booking.Id" class="btn btn-warning">
                        <span class="oi oi-pencil"></span>
                    </a>
                    <button class="btn btn-danger" @onclick="@(()=>Delete(booking.Id))">
                        <span class="oi oi-delete"></span>
                    </button>
                </td>
            </tr>
            }
        </tbody>
    </table>
}


@code {
    private List<Booking> Bookings;

    protected override async Task OnInitializedAsync()
    {
        Bookings = await _client.GetFromJsonAsync<List<Booking>>($"{Endpoints.BookingsEndpoint}");
    }

    async Task Delete(int bookingId)
    {
        var booking = Bookings.First(q => q.Id == bookingId);

        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {booking.Id}?");

        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.BookingsEndpoint}/{bookingId}");
            await OnInitializedAsync();
        }

    }
}